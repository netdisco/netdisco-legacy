NAME

    Netdisco 0.93 (CVS Beta) - README

AUTHOR

    Max Baker

DESCRIPTION

    Netdisco is an Open Source web-based network management tool. Designed
    for moderate to large networks, configuration information and connection
    data for network devices are retrieved by SNMP. With Netdisco you can
    locate the switch port of an end-user system by IP or MAC address. Data
    is stored using a SQL database for scalability and speed.

    Cisco Discovery Protocol (CDP) optionally provides automatic discovery
    of the network topology. The network is inventoried by both device model
    and operating system (like IOS). Netdisco uses router ARP tables and L2
    switch MAC forwarding tables to locate nodes on physical ports and track
    them by their IP addresses. For each node, a time stamped history of the
    ports it has visited and the IP addresses it has used is maintained.
    Netdisco gets all its data, including CDP topology information, with
    SNMP polls and DNS queries. It does not use CLI access and has no need
    for privilege passwords. Security features include a wire-side Wireless
    Access Point (AP) locator.

    Netdisco was designed and built at UCSC and is now hosted by Source
    Forge.

    See <http://www.netdisco.org>

FEATURES

  Switch Ports

    From the web interface devices connected to switch and router ports are
    listed by MAC address. A history of which switch ports a MAC address has
    been seen at is kept. With a click the you can browse a network device
    connected to an uplink port. With another click you can disable or
    enable the switch port, logging the reason, user and date.

    * Central location to disable/enable switch ports.
        Network administrators can disable and enable ports without having
        to know enable or privilege passwords. Reasons for switching on/off
        ports are logged for end-of-the-year auditing and reporting. Non-IOS
        savvy managers can control port access from a familiar browser
        interface. This feature was designed with a University Residential
        Networks (ResNet) in mind.

        Only users you specify in Netdisco will have access to switch off a
        port. Netdisco will also not allow people to switch off uplink ports
        by accident.

    * Supports Cisco VLAN Community String indexing ("public@101")
    * MAC Address to switch port resolution
    * IP Address to switch port resolution
    * Find Switch Ports with multiple nodes attached
    * Find nodes using multiple IP addresses
    * Find nodes by vendor (using MAC address OUI)

  Easy Administration

    * Controllable through Web Interface or Command Line Interface (CLI)
    * Database store for scalability and speed (Postgresql)
    * Easily extendible to new network devices
    * User system to restrict access and features

  Network Administration and Security

    * Automatic inventory and search of network hardware
    * Administratively enable/disable switch ports from web interface with
    logging
    * Duplex Mismatch Finder
    * Find Wireless Access Points (APs) from wired-side of network
    * Layer Two Traceroute

  Reporting

    * Graphing of network topology. Clickable image-map of devices. Link
    speed shown
    * Statistics for number of actual nodes connected to network
    * Integration with Pinnacle Database

  Inventory of Network Devices

    * by Operating System (IOS,CatOS,HP...)
    * by Model, Vendor, OSI Layer, DNS Name
    * Find device ports that are blocking (via Spanning Tree Protocol)
    * Find devices using IP's w/out DNS entries

  SUPPORTED DEVICES

    Netdisco supports any Network device that talks SNMP and has basic
    information available through MIB-II (RFC 1213). Additional
    vendor-specific information is available for a number of devices, but
    especially for Cisco, HP, and Bay devices.

    Device support is handled through "SNMP::Info" -- a Perl module that is
    an integral part of Netdisco that handles device-specific code. See the
    "Device Matrix" at <http://snmp-info.sourceforge.net> for a list of
    devices that have been tested against Netdisco. SNMP::Info can be
    extended for new families of devices relatively easily with a little
    Perl knowledge.

SUPPORT

    Please use the "netdisco-users" mailing list for all problems and
    comments.

    <http://lists.sourceforge.net/lists/listinfo/netdisco-users>

    In case of bugs, please use the Bug interface from SourceForge page at:

    <http://sourceforge.net/projects/netdisco>

GLOSSARY

    Device
        Any device connected to the network that contributes to the physical
        topology. Devices need to be accessible via SNMP. A device usually
        has multiple interfaces (ports) and can have multiple IP addresses.

    Node
        A node is anything connected to a device. Nodes are uniquely
        identified by their MAC addresses. A node may or may not have IP
        addresses associated with it.

    Macsuck
        Technical Answer : The process in Netdisco that goes out to all
        Layer-2 devices and gets the Forwarding Tables / CAM Tables. Each
        row in the table maps a MAC address to a switch port. This process
        is what makes devices show up on switch ports.

        Fun Answer - From Douglas M. McKeown :

        "This is where you go to a switch (Layer 2) and find all the MAC (or
        Ethernet Hardware) addresses which this device is connected to. So
        you plug your Dell into your HP Switch and that HP Switch is
        uplinked to your Core switch (not using the word router here. we're
        talking simple, physical network connections, sort of like
        electrical wires.) Well your Dell has a MAC address of let's say "A"
        and amazingly, your HP switch has a MAC address of "B" and your Core
        switch has an address of "1". Well if you Macsuck your Core switch,
        it doesn't have your Dell connected to it, but it does have "B"
        which is another switch. So you Macsuck "B" and it has MAC addresses
        for 1, B and A! You don't really Macsuck an end device (your Dell).

        So what do we know?

            - Core (1) knows about HP Switch "B".
            - HP Switch "B" knows about Core (1) and Dell "A".
            - Dell "A" knows about HP Switch "B".

        Does "1" know about "A" ? If it's a router it does. Otherwise it
        asks who has "A" and switch "B" says, I know! So 1 goes to B which
        goes to A.

        Got it?"

    Arpnip
        The process in Netdisco that goes out to every Layer-3 device and
        gets its ARP cache. Each entry in the ARP Cache maps a MAC address
        to an IP address.

        This process is what lets Netdisco map an Ethernet address to an IP
        address. Combined with the Macsuck process, Netdisco can ultimately
        resolve an IP address to a switch port.

    CDP
        Having topology information is crucial for Netdisco to function. So
        if you network is not Cisco centric or does not have CDP turned on,
        you must put the information in the netdisco-topology.txt file.

        See "Toplogy Information" in this file.

        From Douglas McKeown :

        "CDP is the Cisco Discovery Protocol. Sort of an add-on for when
        switches talk to switches about who's connected to whom. CDP quickly
        tells other switches that it has switches connected. Netdisco really
        likes CDP a lot for mapping out the network and automatically
        discovering the topology. If your devices don't use CDP, then you
        need to work with the netdisco-topology.txt file to create a layout
        of your network."

INSTALL

    See the INSTALL document for instructions and requirements to install
    Netdisco.

USING NETDISCO

  Components

    Netdisco has three components :

    1. Back-end
        The back-end talks to devices via SNMP. Contained in the back-end is
        the logic to create the topology, collect statistics and generate
        graphs.

        Most of the back-end is controlled by cron jobs.

        A background daemon is put resident to run maintenance tasks
        collected from the front-end. This keeps these sometimes memory
        intensive tasks and code out of the httpd processes.

    2. Database
        Netdisco uses PostgreSQL to store all its information. Careful
        abstraction of the database calls means that Netdisco can be ported
        to another SQL platform easily. Hooks to use other databases are
        present.

    3. Front-end
        The front-end operates on stored data only. This abstraction is both
        for speed and security.

        Some front-end administration tasks are put in a queue in the
        database that a daemon running from the back-end picks up and
        processes.

        The number of people using Netdisco can scale with the web server
        capacity, and will create no extra load on the devices.

  Command-Line Options

    -b || --batchmode
        Batch Mode. Redirect output to log file. Log file directory set in
        configuration file under datadir.

    -C || --configfile file
        Set Config file. Default is netdisco.conf.

    -D || --debug
        DEBUG. Sends copious information to STDOUT

    -L || --nologging
        No Log. This will not add entries to the log table.

    -n || --nodestoo
        Delete Nodes. Used with --expiredevice only.

    -N || --newonly
        New Only. On a network discovery "-r", only discover found devices
        that aren't in the database.

    -P || --port port
        Port. Specify Port for removal of nodes -e.

    -S || --dumpsql
        Debug. carp() SQL commands. Sets $netdisco::SQLCARP to 1.

    -V || --archive
        archiVe nodes. Used with -e only.

  Command-Line Commands

    -a || --arpwalk
        Arp Walk. ArpNip each device that has Layer 3 capabilities.

    -A || --arpnip device
        ArpNip. ArpNip's a single device. See ArpNipper in Design.

        Devices listed in "arpnip_no" in the config file are excluded. See
        the entry below.

    -B || --backup
        Backup and Nightly Maintenance.

        Removes
            Devices and nodes that are old using the "expire_*" config file
            directives (see below).

        Creates
            Archive data files for node,node_ip,device, and device_ip
            tables.

        Calls
            Database cleanup routines (-K) as well.

        Exports
            NMIS config file if nmis_dump is set.

        This routine should be run nightly.

        For a full backup run sql/pg_back to backup the whole database.

    -d || --discover device
        Discover Device.

        Devices listed in "discover_no" in the config file are excluded. See
        the entry below.

    -e || --expirenodes device
        Expire Nodes for given device. Use -V to archiVe instead of delete.
        Specify a port with -P to delete or archive nodes on a per port
        basis.

    --expire-nodes-subnet subnet
        Finds all devices in given subnet and runs expire nodes on each.
        Will display devices effected and then ask for confirmation.

        Subnet is specified in CIDR format :

            192.168.0.0/24

    -E || --expiredevice device
        Delete a device. Use -n to delete nodes as well.

    -F || --discoverfile file
        Discover Device from given File. Used to restore backed up info from
        -B, and to discover devices that are not available through topology
        information. Use -T to only import Topology Information.

    -g || --graph
        Graph. Creates graph -- both GIF and ImageMap.

    -h || --help
        Prints out command line usage.

    -i || --changeip old_ip new_ip
        Change IP address of device. Creates new entry, removes old one and
        moves nodes over to the new one.

    -I || --expireips
        Expire IP Addresses from node_ip table. This will delete entries
        from the node_ip table that are not matching entries (MAC Addresses)
        found in the node or device_port tables.

    -k || --cleanalias
        alias klean-up. DANGEROUS. Deletes from the device table any IP
        address that is found as an alias in the alias table.

    -K || --cleannodes
        Datbase Node Klean-up. Permanently deletes nodes matching:

        1. MAC Addresses that are Switch Port Addresses
        2. MAC Addresses that are listed on non-existant ports
        3. MAC Addresses that exist on ports with topology information
        (uplink ports)

    -m || --macwalk
        Mac Suck each device in the database that has Layer 2 capabilities.

    -M || --macsuck device
        Mac Suck given device only.

        Devices listed in "macsuck_no" in the config file are excluded. See
        the entry below.

    -O || --oui
        Import OUI information from oui.txt

    -p || --daemon [start,stop,status,restart]
        Control the Admin Daemon. Takes arguments
        (start,stop,status,restart).

    -r || --discoverall root_device
        Walk the network with the given root. Use -N to discover new devices
        only. Given root device will always be discovered.

    -R || --refresh
        Refresh devices. Will run a discover (-d) for each device in the
        database.

    -T || --topofile
        Import Topology Data. Will import manual topology data stored in
        file specified by configuration option topofile . Use -F to specify
        a different file from the command line.

    -u || --user [user] [password] [port_control?] [admin?]
        Add or Change a User. Supply all four arguments (user pw
        port_control admin) for command-line control, or supply less for
        interactive prompts.

        It's better to use interactive prompts so that the password doesn't
        get stored in your shell history file and exported to the process
        table.

    -v || --version

  Features

    Admin Daemon
        The admin daemon is a copy of "netdisco" that runs in the
        background. From the web "Admin Panel", jobs are put in a queue in
        the database. The daemon picks up these jobs and executes them from
        the back-end as user "netdisco". The daemon is restarted daily in a
        cron job, or can be manually started as root :

            su - netdisco -c "/usr/local/netdisco -p restart"

    Port Info / Jack Search
        This feature integrates Netdisco with other databases that have port
        info.

        Port Info was designed around data coming out of a Pinnacles
        database at UCSC, and might prove to be site-specific. However, see
        "port_info.html" for a good example of how to access other databases
        using the "netdisco.pm" SQL routines.

        Enable this feature by setting "port_info" to true in
        "netdisco.conf"

    Port Control
        Port Control allows a user of Netdisco to administratively turn a
        port on or off.

        To do this the back-end requires a read-write community string for
        the device in question. The admin daemon must also be enabled.
        Netdisco keeps a log for each port holding information about why a
        port was turned on or off.

        A reason for turning switch the port is chosen from a list to
        provide future audits of admin activity. The user and IP address of
        the request are stored. To change the default reasons, modify the
        %PORT_CONTROL_REASONS hash in "netdisco.pm"

        Optionally if the "portctl_email" setting is set in "netdisco.conf",
        an e-mail is sent out with a notification of the switching. Locally
        at UCSC that e-mail is sent to an administrative mailing list.

        To turn this feature off uncheck the "Port Control" checkbox from
        all users in the "Admin Panel".

    Web Console
        The Web Console allows netdisco to front-end the web interface of a
        switch or router. Traffic can then be routed over https, through
        Netdisco's web server. An additional security layer is added by
        requiring the user to be logged into Netdisco. The normal security
        measures used by the device's web server are still active.

        The Web console is a reverse proxy that runs on Apache. You must
        enable it in "netdisco_apache.conf" and "netdisco_apache_dir.conf".
        The add devices and models to the configuration lines
        "web_console_vendors" and "web_console_models" in "netdisco.conf".

  Netdisco Maintenance

    Refreshing a device
        To refresh or discover a device and its ports, use the -d command:

            netdisco -d mydevice

    Importing Topology Information
        It is not necessary to import the topology information after
        changing netdisco-topology.txt. You should however restart the admin
        daemon. The topology text file is reparsed each time you run
        netdisco.

        As a convience you can use the topology file to quickly seed
        Netdisco with devices. To import all the topology information at
        once make sure the topology filename is set in "netdisco.conf" and
        use the -T command:

            netdisco -T

    Aborting a process of Netdisco
        Hit Ctrl-C if you are running a netdisco process, or send the job
        the INT signal. The job can cleanup after itself, write out its
        stats and log entries.

            kill -INT jobpid

        There is currently no way to stop a job inside the Admin daemon.
        Send the daemon an INT signal and it will terminate after its
        current job has completed.

    Changing the IP Address of a Device
        If a device is being replaced with a different device and a
        different IP, see "Deleting a Device" below.

            netdisco -i old-ip-address new-ip-address

        Changing the IP address of a device will:

        1. Discover the new device
        2. Remove Old Device Entry, port, and aliases
        3. Move the old nodes to the new device.

    Auto-Deleting Old Data From the Database
        In order for Netdisco to be self-maintaining data has to be taken
        out of the database as well as put in. The following config file
        directives are used to auto-prune stuff from the database :

        expire_devices
        expire_nodes
        expire_nodes_archive

        See each item's entry in the "Config File" Section below for more
        details.

        The expire data routines are called from the -B/Backup routine,
        which should be running nightly via cron.

    Deleting a Device
        To delete a device use the -E command followed by the device name or
        IP. Set -n to delete all the nodes seen on that device as well

        This is rather permanent. Make sure you run -Backup before you do
        this.

    Deleting Nodes
        Nodes consist of two components -- the switch port to MAC address
        mapping in the "node" table, and the MAC address to IP mapping in
        the "node_ip" table.

        To remove nodes from a switch, use the Admin Panel on the web side
        and choose either "Delete Nodes" or "Archive Nodes". Archiving nodes
        will set the archive bit so that the data will be available, but not
        always showing. You can also delete nodes from the command line
        using the -e command with or without the -V flag.

        Database Cleanup -K will delete nodes that seem to be extraneous.
        See -K for more details.

        Once you have cleared out nodes from a switch, then run -I to remove
        unused node to IP mappings.

        This is rather permanent. Make sure you run -Backup before you do
        this.

    Adding / Changing Users
        The easiest way to add a user is to use the "Add User" form in the
        Admin Panel. After first installing Netdisco you need to add an
        admin user by running -u.

    Localhost (127.0.0.1) is showing up on CDP Links
        See "How the Switch Selects the IP Address To Include in Outbound
        CDP Packets" in
        ftp://ftp.hp.com/pub/networking/software/59692375_e1.pdf

    Device Model comes up as 'Products.'
        The device is probably newer than your Cisco MIBs. Redownload
        <ftp://ftp.cisco.com/pub/mibs/v2/v2.tar.gz> and install these newest
        mibs into /usr/local/share/snmp/mibs.

    Things are getting Really slow
        For some reason over here at UCSC, things get real slow in Postgres
        after a while. Even though we are doing frequent VACUUM's on all the
        data, it seems to be dragging down after a while.

        In order to fix this we do a "VACUUM FULL ANALYZE VERBOSE" from
        "pg_run". This command locks each table before it does the VACUUM,
        and therefor can be more through. It's a good idea to take netdisco
        down temporarily while you do this. I do this about once a month, or
        when I notice it dragging down. Use "Netdisco Statistics" as a good
        metric of things slowing down. This may get fixed with changes in
        VACUUM in Postgres 7.4 and above.

        Procedure for doing a vacuum full :

        1. Shutdown the admin daemon
                su - netdisco -c "/usr/local/netdisco/netdisco -p stop"

        2. Clear the cron tab for user netdisco
                su - -c "crontab -u netdisco -r"

        3. Comment out the netdisco config file Includes in httpd.conf
        4. Restart Apache
                su - -c "/usr/local/apache/bin/apachectl graceful"

        5. Run VACUUM FULL ANALYZE VERBOSE in psql
                /usr/local/netdisco/sql/pg_run
                VACUUM FULL ANALYZE VERBOSE;

        6. Restart Postgres (just for fun)
                su - -c "/usr/local/etc/rc.d/010.pgsql restart" 

        7. Uncomment lines in httpd.conf
        8. Restart Apache
                su - -c "/usr/local/apache/bin/apachectl graceful"

        Reload crontab for user netdisco
                su - -c "crontab -u netdisco /usr/local/netdisco/netdisco.crontab"

        Restart Admin Daemon
                su - netdisco -c "/usr/local/netdisco/netdisco -p start"

  Topology Information

    Topology information is crucial to Netdisco's performance. It allows the
    application to know which ports are uplink ports and which have
    connected nodes. Ports that are uplink ports that are not marked so in
    Netdisco will appear to steal MAC address entries from their rightful
    ports. So it is critical to use the topology file and CDP to maintain a
    topology.

   Manual Topology Information

    Netdisco will auto-discover the layer-two topology of a network using
    CDP. However, many networks have parts of the topology that are not
    covered by CDP.

    Use the manual topology file "netdisco-topology.txt" to supply the
    layout of the network if your network has devices that don't talk CDP or
    misreport information.

    The manual topology file only requires one side of the data to be
    entered. Both directions of a link will be forced to the given data if
    one side is listed.

    File Format

    The format of the manual topology consists of four types of lines:

    #comment
        Comments are delimited with a "#" They can happen on any line.

    routername
        Any line that does not start with "link:" or "alias:" is assumed to
        be a the DNS name or IP address of a network device.

    link:
        Lines that start with "link:" connect two devices together. The
        format is

            link:outgoing port,destination device,Destination port

        The outgoing port belongs to the device listed above the "link:"
        line.

        The Destination Device and Port tell Netdisco who is on the other
        end of this link. The device can be a DNS name or an IP Address.

    alias:
        Not implemented for output. The backup file will have these lines
        just for informations' sake. Alias IPs on a device are found during
        discovery.

        Many network devices like routers have multiple IP addresses
        assigned to them. If the device cannot or does not supply this
        information to Netdisco in a standard way, you can add IP addresses
        used here.

    White space in the file (except for line breaks) is ignored. Tabbing
    over before "line:" lines makes it easier to read, but is not required.

    File Uses

    Some reasons the manual topology file is used:

    1. Man in the Middle
        Let's say you have two CDP speaking devices with a non-CDP speaking
        device in between them

            [Cisco] ---> [Bay] ---> [HP]

        The Cisco and HP devices (CDP speakers) find each other and the Bay
        device never appears. You would then have to add these lines to the
        topology file:

            ciscoswitch.my.company
                link:EtherNet0/1,bayswitch.my.company,25
            bayswitch.my.company
                link:26,hpswitch.my.company,J3

        This tells Netdisco that port "Ethernet0/1" on "ciscoswitch" is
        connected to Port 25 on "bayswitch". Then in turn Port 26 on
        "bayswitch" is connected to port "J3" on "hpswitch".

        A note about devices that are *CDP Aware* and that implement CDP:

        *CDP Aware* devices are devices that probably do not speak CDP
        (probably for legal reasons) but that are smart enough not to
        forward CDP packets. Cisco devices that have CDP disabled are
        usually still *CDP Aware* and will not forward the packets.
        Man-in-the-middle situations occur when the device both does not
        speak CDP and is not *CDP Aware*.

    2. Isolated Network Segment
        If you have a segment of your network that is not connected
        directly, or conneted through a non physical link like a VPN, then
        you might fudge an entry to connect that segement of the nework with
        the main one.

    3. Attach a non-CDP speaking device
        Anywhere a device that does not supply topology information is
        connected to the network, an entry must be added in the manual
        topology file.

  Cron Jobs

    Netdisco is controlled via cron jobs. Jobs are run as user "netdisco".
    Mulitple jobs can be run at once.

    The default jobs are :

    * MacSuck - Every 4 hours MacSuck all the devices in the database.
    * ArpNip - Every 4 hours ArpNip all the devices in the database. (Offset
    from Macsuck by 2 hours)
    * Refresh Devices - Once a day refresh device information.
    * Backup - Once a day backup information.
    * Graph - Once a day re-create the graph.
    * Walk Network - Once a week (Wed @ 14:00) try and discover new devices.
    * Restart Admin Daemon - Once a day just for good measure.

Config File

    The settings in "netdisco.conf" are used both in the back-end and the
    front-end.

    When you make a change in the config file that is used in the web front
    end, you must reload apache. The config information is shared between
    processes for speed and memory performance.

        su - -c "/usr/local/apache/bin/apachectl restart"

    Multiple config files can be used in the back-end by calling Netdisco
    with the "-C" option:

        netdisco -C myotherfile.conf

  General Items

    domain
        STRING. Trimmed from all DNS names viewed. Leave blank to show all
        domain names. Add a dot in front of your value :

            .ucsc.edu

    home
        PATH. Full path to where netdisco lives. Is the root path for all
        other files and paths.

  Database Maintenance

    New in version 0.93 these directives are included to help make Netdisco
    more self-maintaining.

    Setting these will result in permanent data removal.

    expire_devices
        DAYS. Devices that have not been refreshed in this number of days
        will be removed. All nodes connected to this device will be removed
        as well.

    expire_nodes
        DAYS. Nodes that have not been refreshed in this number of days will
        be removed from the database. Archived and non-archived nodes are
        removed. This includes SwitchPort/MAC and MAC/IP mappings.

    expire_nodes_archive
        DAYS. Archived data for switch-port/MAC and MAC/IP mappings older
        than this number of days will be removed.

  Back-End Items

    arpnip_no
        LIST:IPs and Subnets. Comma Separated list of devices and subnets
        not to include in arpnipping.

        You can put in a CIDR style subnet or a single IP address :

            arpnip_no = 192.168.0.0/24,192.168.0.1,192.168.1.0/24

        You can NOT use an abbrievated CIDR subnet like "192/8".

    compress
        EXECUTABLE. Full path and command line arguments to the compression
        program used in compresslogs

    compresslogs
        BOOLEAN. Compress log files? See compress entry above.

    datadir
        PATH. Full or relative path to the directory that backups and logs
        will be stored in

    discover_no
        LIST:IPs and Subnets. Comma Separated list of devices and subnets
        that will not get hit with an SNMP disovery event.

        See arpnip_no for more details.

    ignore_private_nets
        Not fully implemented.

        BOOLEAN. Set to true to ignore aliases that are part of private
        nets:

            10.0.0.0/8 172.16.0.0/16 and 192.168.0.0/24  

    logextension
        STRING. The extension to add to log files.

    macsuck_no
        LIST:IPs and Subnets. Comma Separated list of devices and subnets
        not to macsuck.

        See arpnip_no for more details.

    macsuck_no_vlan
        LIST:Strings. Comma separated list of VLAN names not to visit when
        MACsucking.

        This option was used to speed up MACsucking on certain Cisco
        Catalyst family devices where you have to connect to each VLAN with
        SNMP to get the forwarding tables. Certain default VLANs will not
        answer to SNMP, and Netdisco has to wait for them to timeout.

    macsuck_timeout
        SECONDS. Timeout for devices when mac sucking.

    nmis_dump
        FILENAME. Set this option to have nightly() (-B) dump an NMIS
        <http://www.sins.com.au/nmis> style Config file. Warning, this file
        will contain SNMP Community strings.

        Optional Override options are :

        nmis_group
            STRING. Group to use with nmis_dump. Default "Network"

        nmis_role
            STRING. Role to use with nmis_dump. Default "core"

        nmis_collect
            STRING. Collect option to use with nmis_dump. Default "true"

        nmis_active
            STRING. Active option for nmis_dump file. Default "true"

        nmis_net
            STRING. Net identifier to use. Default "lan"

        nmis_port
            INT. SNMP Port to list in nmis_dump file. Default 161

    reverse_sysname
        BOOLEAN. Turn this on to have Netdisco do a reverse lookup of the
        sysName.0 field to use as the managment IP address for a device. See
        bug 810939 and device_root() for more info. Default "false"

    topofile
        FILE. Full path of the file that contains manual topology
        information. Defaults to netdisco-topology.txt

    timeout
        SECONDS. Timeout for refreshing or discovering a device

   Admin Panel

    daemon_bg
        BOOLEAN. Run daemon in the background?

    daemon_pid
        FILE. Filename for the pid file used by admin daemon. Must be
        writable by daemon user.

    daemon_poll
        SECONDS. Time to wait to check for new items in the queue.

   Database Settings

    The five database settings are "db" , "db_user", "db_pw", "db_opts", and
    "db_env".

    You can run multiple database types in Netdisco. See "port_info" for an
    instance of this.

    For each of the above settings, the database shortcut name (you choose)
    is inserted after "db".

    Postgres is the required first database, and uses the short name "Pg".

    The following lines must be added :

    db_Pg
        STRING. Database connect string to give to DBI.

        Default : "dbi:Pg:dbname=netdisco"

    db_Pg_user
        STRING. Database user

    db_Pg_pw
        STRING. Database Password

    db_Pg_opts
        HASH. Options to add to the connect string.

        Default : "PrintError => 1, AutoCommit => 1"

    db_Pg_env
        HASH. Environment variables to be set before running database calls.

        Mainly used for Oracle.

        Default : not set.

   SNMP Settings

    community
        LIST:STRING. A comma separated list of community strings to try on
        each device.

    community_rw
        LIST:STRING. OPTIONAL. A comma separated list of Read-Write
        community strings.

        This is only necessary if you turn on the "port_control" command.

    snmpver
        INT. Default version of SNMP protocol to connect with.

    snmpretries
        INT. Settings for 'Retries' field passed to SNMP::Session

  Web Settings

    port_info
        BOOLEAN. Turns on the "Port Info" and "Jack Search" features.

    portctl_email
        EMAIL. Address that reports of use of "Port Control" are sent to.

    portctl_timeout
        SECONDS. Amount of time to wait for a response from the admin
        daemon.

    secure_server
        BOOLEAN. If a secure server is present.

        Requires web login, password changing and all admin functions to be
        run in secure space.

    web_console_models
        LIST:STRING. Comma separated list of models that want to use the Web
        Console

    web_console_vendors
        LIST:STRING. Comma separated list of vendors that use the Web
        Console.

    webpath
        PATH. URL Path added to the beginning of links on the web front-end

    websession
        MINUTES. Amount of time a session lasts before someone has to login
        again.

   Graph Settings

    edge_color
        STRING. Default color for link between devices.

    graph
        FILE. Full path and name to the GIF graph of the network. Path
        should be the same as in the "netmap.html" component.

    graph_bg
        STRING. Background color for the graph.

    graph_color
        STRING. Text color for the graph

    graph_epsilon
        INT. Sets the "epsilon" attribute in "GraphViz" used to control the
        graph solver. Set to an integer value. This will improve the mapping
        and visual quality of them graph. Each integer step can mean an
        exponential time increase in the solving of the graph.

    graph_layout
        STRING. Choose program to render graph with. Valid options are
        "neato" and "twopi".

    graph_map
        FILE. Set to Full path and name to the ISMAP data for the network.
        Path should be the same as in the "netmap.html" component.

    graph_overlap
        BOOLEAN. Parameter passed to "GraphViz" for the "overlap="""
        feature.

    graph_ranksep
        FLOAT. Rank Separation of elements in graph.

    graph_raw
        FILE. Set to create the raw (.dot) graph file as well.

    graph_splines
        BOOLEAN. Turn on GraphViz's spline engine? (Is very processor
        intensive).

    graph_svg
        FILE. Set to create an SVG version of the graph. Requires GraphViz
        0.8 or greater.

    graph_timeout
        MINUTES. Time to allow "neato" to try and solve the graph. Default
        60min.

    graph_x, graph_y
        FLOAT. The X and Y dimensions of the graph in inches. To convert to
        pixels, times by 100 (96 actually). So 30x30 will give you a graph
        that is about 3000x3000 pixels wide.

    node_fillcolor
        STRING. Default background color for device

    node_font
        FILE. Name of the True Type Font used for label of node. Exclude
        .ttf in name.

    node_fontcolor
        STRING. Color of text

    node_fontsize
        FLOAT. Size of text in Pixels. Note that for the graph_overlap=scale
        option, the font gets scaled down and so an oversized font is used.

    node_map
        STRING. Colon separated list of values. Multiple node_map entries
        can exist. Entry is in format:

            Variable:Regular Expression:Attribute:Value

        Variables that you can use include : label,ip

        Attributes can be any node attribute usable in GraphViz, such as
        fillcolor and color

        Examples:

            label:cat(?!-g):fillcolor:blue

        If the label (dns name) matches cat, but not cat-g, make it blue

            ip:^169\.233:color:yellow

        If the IP address of the device starts with 169.233, then make the
        border around the device yellow.

    node_problem
        STRING. Color to use for devices that are not accessible

    node_shape
        STRING. Default shape for device

    node_style
        STRING. Default style of device, normally filled.

DESIGN

  Design Goals

    * Use of SNMP Leaf Names only; No OIDs
    * Easily extendible to new devices. No device-specific hacks in logic
    * Modular back-end database front-end setup
    * Security. Front-end abstraction from device manipulation means
    sensitive network devices are not exposed to a web interface .
    * Data Archiving. Data structures and backup routines to provide online
    and offline storage of network structure and usage.
    * Highly Configurable. Extract out all possible options to netdisco.conf
    and avoid site-specific code.
    * Administration available on both command line and web interfaces.

  Back-End Components

    netdisco.pm
        Perl Module that holds all the SQL interaction routines as well as
        some helper routines. Used by both the back-end and front-end.

    SNMP::Info
        Perl Modules created for this project that are used to provide the
        interaction between the device and Netdisco over SNMP. All
        device-specific changes are done in these modules.

    Network Walker
        Using a device as a starting point (root), the walker then tries to
        visit every device directly connected to the starting point.
        Neighboring devices are found with CDP.

    ArpNipper
        The ArpNipper is visits each discovered device with Layer 3
        capabilities. Each device's ARP Cache is read and the IP address to
        MAC address translation is stored in the node_ip table.

        The original ArpNipper was written by Jim Warner at UCSC.

    MacSucker
        The MacSucker visits each device with Layer 2 capabilities. Each
        device's Forwarding Table is read. MAC addresses that are on ports
        without a physical mapping (virtual ports) are skipped. MAC
        Addresses on ports with a neighbor recorded are skipped (uplink
        ports). MAC Addresses that are actually switch ports are skipped.
        The remaining MAC addresses are recorded as nodes in the nodes
        table.

        If the device supports the v_name() call, and has VLANs, then the
        MacSucker tries to connect to each VLAN and macksuck() each VLAN.
        This is required for some devices like the Cisco Catalyst 5000
        series.

        The original MacSucker was written by Mark Boolootian at UCSC.

    Helper Routines
        The 40+ routines for creating backups, logging, etc.

        Browse the source code or check out netdisco-api for more info.

  Database

    Netdisco uses PostgreSQL as its database store. Indexing is used heavily
    to speed up queries and facilitate large data sets. See the "sql/"
    directory and INSTALL for more information.

   SQL Tables

    admin
        Queue for admin control panel tasks to be sent back and forth from
        the front-end.

    device
        Holds device information. Each device is identified by unique IP
        Address.

    device_ip
        Holds alias IP Addresses for devices. Each device can have multiple
        IP's stored in this table. The master IP address is either taken
        from SNMP information or from the reverse DNS entry of the device
        name. Also used to link a certain alias to a port.

    device_port
        Holds the interface (port) information for each device. One row for
        each interface exists with information about the port status.

    device_port_log
        Contains log entries for port_control, tool used for
        administratively enabling and disabling ports.

    log Holds log entries for human use.

    node
        Holds an entry for each MAC address connected to the network that
        isn't a device. Tells on which switch port the node was seen, and
        when it was seen there. Also holds the archived data on node
        location. Archived data has the column ''active'' set to false. Data
        comes from MacSucker

    node_ip
        Maps a MAC Address to an IP address. Has no notion of where this
        node was seen. Keeps time stamps of when this is from. Data comes
        from ArpNipper. Archived data is similar to the node table, where
        ``active'' is set to false for archived data.

    sessions
        Web sessions created by MasonX::Request::WithApacheSessions. Stores
        information about a current session in the global $m->session hash
        under mason.

    oui Populated with data from oui.txt Oui.txt contains the
        Organizationally Unique Identifiers (OUI) that map a MAC address to
        a vendor. The database is controlled by the IEEE. See INSTALL for
        more information.

    users
        User information for web front end.

THANKS

    I would like to thank the following people for their contributions to
    Netdisco :

    Mark Boolootian (Through who's ideas Netdisco was born and shaped)
    (UCSC), Jim Warner (UCSC), Mike Hunter (UCB), Brian Wilson (NCSU),
    Bradley Baetz (bbaetz), David Temkin (sig.com), Edson Manners (FSU),
    Dmitry Sergienko (Trifle Co, .ua) Remo Rickli (PSI, Switzerland),
    Jean-Philippe Luiggi (sagem.com), A.L.M Buxey (Loughborough University,
    UK), Kevin Cheek (UMICH), John Bigrow (bnl.gov), George Pavel
    (llnl.gov), Charles Goldsmith (CompUSA), Douglas M. McKeown
    (saintmarys.edu).

    And probably lots of other people I forgot to put in here. Not to
    mention the authors and communities of all the other software that
    Netdisco is built upon.

