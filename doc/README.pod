=head1 NAME

Netdisco 0.93 (CVS Beta) - README

=head1 AUTHOR

Max Baker

=head1 DESCRIPTION

Netdisco is an Open Source web-based network management tool.
Designed for moderate to large networks, configuration information and
connection data for network devices are retrieved by SNMP.  With Netdisco
you can locate the switch port of an end-user system by IP or MAC address.
Data is stored using a SQL database for scalability and speed.

Cisco Discovery Protocol (CDP) optionally provides automatic discovery of
the network topology.  The network is inventoried by both device model and
operating system (like IOS).  Netdisco uses router ARP tables and L2 switch  
MAC forwarding tables to locate nodes on physical ports and track them by 
their IP addresses.  For each node, a time stamped history of the ports it
has visited and the IP addresses it has used is maintained.  Netdisco gets all
its data, including CDP topology information, with SNMP polls and DNS queries.
It does not use CLI access and has no need for privilege passwords.  Security 
features include a wire-side Wireless Access Point (AP) locator.  

Netdisco was designed and built at UCSC and is now hosted by Source Forge.

See L<http://www.netdisco.org>

=head1 FEATURES

=head2 Switch Ports

From the web interface devices connected to switch and router ports are listed by 
MAC address.  A history of which switch ports a MAC address has been seen at is 
kept.  With a click the you can browse a network device connected to an uplink port.
With another click you can disable or enable the switch port, logging the reason, user and
date.

=over

=item * Central location to disable/enable switch ports.  

Network administrators can disable and enable ports without having to know enable or
privilege passwords.  Reasons for switching on/off ports are logged for end-of-the-year 
auditing and reporting.   Non-IOS savvy managers can control port access from a familiar
browser interface.  This feature was designed with a University Residential Networks (ResNet)
in mind.

Only users you specify in Netdisco will have access to switch off a port.  Netdisco
will also not allow people to switch off uplink ports by accident.

=item * MAC Address to switch port resolution

=item * IP Address to switch port resolution

=item * Find Switch Ports with multiple nodes attached

=item * Find nodes using multiple IP addresses

=item * Find nodes by vendor (using MAC address OUI)

=back

=head2 Easy Administration

=over 

=item * Controllable through Web Interface or Command Line Interface (CLI)

=item * Database store for scalability and speed (Postgresql)

=item * Easily extendible to new network devices

=item * User system to restrict access and features 

=back

=head2 Network Administration and Security

=over

=item * Automatic inventory and search of network hardware

=item * Administratively enable/disable switch ports from web interface with logging

=item * Duplex Mismatch Finder

=item * Find Wireless Access Points (APs) from wired-side of network

=item * Layer Two Traceroute

=back

=head2 Reporting

=over

=item * Graphing of network topology.  Clickable image-map of devices.  Link speed shown

=item * Statistics for number of actual nodes connected to network

=item * Integration with Pinnacle Database

=back

=head2 Inventory of Network Devices

=over

=item * by Operating System (IOS,CatOS,HP...)

=item * by Model, Vendor, OSI Layer, DNS Name

=item * Find device ports that are blocking (via Spanning Tree Protocol)

=item * Find devices using IP's w/out DNS entries

=back 

=head1 SUPPORT

Please use the C<netdisco-users> mailing list for all problems and comments.

L<http://lists.sourceforge.net/lists/listinfo/netdisco-users>

In case of bugs, please use the Bug interface from Source Forge page at :

L<http://sourceforge.net/projects/netdisco>

=head1 GLOSSARY

=over 4

=item Device

Any device connected to the network that contributes to the physical topology.
Devices need to be accessible via SNMP.  A device usually has multiple interfaces
(ports) and can have multiple IP addresses.

=item Node

A node is anything connected to a device.   Nodes are uniquely identified by their
MAC addresses.  A node may or may not have IP addresses associated with it.

=back


=head1 INSTALL

See the INSTALL document for instructions and requirements to install Netdisco.

=head1 USING NETDISCO

=head2 Components

Netdisco has three components :

=over 4

=item 1. Back-end 

The back-end talks to devices via SNMP.  Contained in the back-end is the logic to create the topology,
collect statistics and generate graphs.  

Most of the back-end is controlled by cron jobs.  

A background daemon is put resident to run maintenance tasks collected from the front-end. This 
keeps these sometimes memory intensive tasks and code out of the httpd processes. 

=item 2. Database

Netdisco uses PostgreSQL to store all its information.  Careful abstraction of the database calls
means that Netdisco can be ported to another SQL platform easily.  Hooks to use other databases are
present.

=item 3. Front-end

The front-end operates on stored data only.  This abstraction is both for speed and security.

Some front-end administration tasks are put in a queue in the database that a daemon running from
the back-end picks up and processes.

The number of people using Netdisco can scale with the web server capacity, and will create no extra load
on the devices. 

=back

=head2 Command-Line Options

=over

=item -b || --batchmode

Batch Mode.  Redirect output to log file.  Log file directory set in configuration file 
under L<datadir>.

=item -C || --configfile file

Set Config file. Default is netdisco.conf.

=item -D || --debug

DEBUG.  Sends copious information to STDOUT

=item -L || --nologging

No Log.  This will not add entries to the L<log|/"item_log"> table.

=item -n || --nodestoo

Delete Nodes.  Used with --expiredevice only.

=item -N || --newonly

New Only.  On a network discovery L</"-r">, only discover found devices that aren't in the database. 

=item -P || --port port

Port.  Specify Port for removal of nodes L<-e>.

=item -S || --dumpsql

Debug.  carp() SQL commands.  Sets $netdisco::SQLCARP to 1.

=item -V || --archive

archiVe nodes.  Used with L<-e> only.

=back

=head2 Command-Line Commands

=over

=item -a || --arpwalk

Arp Walk.  ArpNip each device that has Layer 3 capabilities.

=item -A || --arpnip device

ArpNip.  ArpNip's a single device.  See L<ArpNipper> in Design.

Devices listed in C<arpnip_no> in the config file are excluded.  See the 
entry below.

=item -B || --backup

Backup.  Create backup data files for L<node|"item_node">,L<node_ip|"item_node_ip">,L<device|"item_device">, and L<device_ip|"item_device_ip"> tables.
Calls database cleanup routines (L<-K>) as well.  Will export an NMIS config file if L<nmis_dump> is set.

For a full backup run C<sql/pg_dump>.

=item -d || --discover device

Discover Device.   

Devices listed in C<discover_no> in the config file are excluded.  See the 
entry below.

=item -e || --expirenodes device

Expire Nodes for given device. Use L<-V> to archiVe instead of delete.  Specify a 
port with L<-P> to delete or archive nodes on a per port basis.

=item --expire-nodes-subnet subnet

Finds all devices in given subnet and runs expire nodes on each.   Will 
display devices effected and then ask for confirmation.

Subnet is specified in CIDR format :

    192.168.0.0/24


=item -E || --expiredevice device

Delete a device. Use L<-n> to delete nodes as well.

=item -F || --discoverfile file

Discover Device from given File.   Used to restore backed up info from L<-B>, and to 
discover devices that are not available through topology information.  Use L<-T> to 
only import Topology Information.

=item -g || --graph

Graph.  Creates graph -- both GIF and ImageMap.

=item -h || --help

Prints out command line usage.

=item -i || --changeip old_ip new_ip

Change IP address of device.  Creates new entry, removes old one and moves nodes
over to the new one. 

=item -I || --expireips

Expire IP Addresses from L<node_ip|"item_node_ip"> table.   This will delete entries from the node_ip table
that are not matching entries (MAC Addresses) found in the node or device_port tables.

=item -k || --cleanalias

alias klean-up.  DANGEROUS.  Deletes from the F<device> table any 
IP address that is found as an alias in the F<alias> table.

=item -K || --cleannodes

Datbase Node Klean-up. Permanently deletes nodes matching: 

=over 

=item 1. MAC Addresses that are Switch Port Addresses

=item 2. MAC Addresses that are listed on non-existant ports

=item 3. MAC Addresses that exist on ports with topology information (uplink ports)

=back

=item -m || --macwalk

Mac Suck each device in the database that has Layer 2 capabilities.

=item -M || --macsuck device

Mac Suck given device only.

Devices listed in C<macsuck_no> in the config file are excluded.  See the 
entry below.

=item -O || --oui

Import OUI information from oui.txt

=item -p || --daemon [start,stop,status,restart]

Control the Admin Daemon.  Takes arguments (start,stop,status,restart).

=item  -r || --discoverall root_device

Walk the network with the given root.  Use L<-N> to discover new devices only.  Given root device
will always be discovered.

=item -R || --refresh

Refresh devices.  Will run a discover (L<-d>) for each device in the database.

=item -T || --topofile

Import Topology Data.  Will import manual topology data stored in file specified by 
configuration option L<topofile> . Use L<-F> to specify a different file from the
command line. 

=item -u || --user [user] [password] [port_control?] [admin?]

Add or Change a User.  Supply all four arguments (user pw port_control admin) for 
command-line control, or supply less for interactive prompts.

It's better to use interactive prompts so that the password doesn't get stored in your 
shell history file and exported to the process table.

=item -v || --version

=back

=head2 Features

=over

=item Admin Daemon

The admin daemon is a copy of C<netdisco> that runs in the background.  From the web C<Admin Panel>,
jobs are put in a queue in the database.  The daemon picks up these jobs and executes them from the 
back-end as user C<netdisco>.  The daemon is restarted daily in a cron job, or can be manually started
as root :

    su - netdisco -c "/usr/local/netdisco -p restart"

=item Port Info / Jack Search

This feature integrates Netdisco with other databases that have port info.

Port Info was designed around data coming out of a Pinnacles database at UCSC, and might
prove to be site-specific.   However, see C<port_info.html> for a good example of how to access other
databases using the C<netdisco.pm> SQL routines. 

Enable this feature by setting C<port_info> to true in C<netdisco.conf>

=item Port Control

Port Control allows a user of Netdisco to administratively turn a port on or off.  

To do this the back-end requires a read-write community string for the device in question. 
The admin daemon must also be enabled.  Netdisco keeps a log for each port holding information 
about why a port was turned on or off.  

A reason for turning switch the port is chosen from a list to provide future audits of admin activity.  
The user and IP address of the request are stored.  To change the default reasons, modify the 
C<%PORT_CONTROL_REASONS> hash in C<netdisco.pm>

Optionally if the C<portctl_email> setting is set in C<netdisco.conf>, an e-mail is sent out with a 
notification of the switching.  Locally at UCSC that e-mail is sent to an administrative mailing list.

To turn this feature off uncheck the C<Port Control> checkbox from all users in the C<Admin Panel>.

=item Web Console

The Web Console allows netdisco to front-end the web interface of a switch or router.  
Traffic can then be routed over https, through Netdisco's web server.  An additional security layer is added
by requiring the user to be logged into Netdisco. The normal security measures used by the 
device's web server are still active.

The Web console is a reverse proxy that runs on Apache.  You must enable it in C<netdisco_apache.conf> and 
C<netdisco_apache_dir.conf>.   The add devices and models to the configuration lines C<web_console_vendors> and
C<web_console_models> in C<netdisco.conf>.

=back

=head2 Netdisco Maintenance

=over

=item Refreshing a device

To refresh the device and its ports, use the L<-d> command:

    netdisco -d mydevice

=item Importing Topology Information

To import all the topology information at once make sure the topology filename is set in C<netdisco.conf>
and use the L<-T> command:

    netdisco -T

=item Aborting a job

Hit Ctrl-C if you are running the job, or send the job the INT signal. The job can cleanup after itself,
write out its stats and log entries. 

    kill -INT jobpid

=item Changing the IP Address of a Device

If a device is being replaced with a different device and a different IP, see L<"Deleting a Device">
below.

    netdisco -i old-ip-address new-ip-address

Changing the IP address of a device will:

=over

=item 1. Discover the new device

=item 2. Remove Old Device Entry, port, and aliases

=item 3. Move the old nodes to the new device.

=back

=item Deleting a Device

To delete a device use the L<-E> command followed by the device name or IP.  Set L<-n> to 
delete all the nodes seen on that device as well 

This is rather permanent.  Make sure you run L<-B>ackup before you do this.

=item Deleting Nodes

Nodes consist of two components -- the switch port to MAC address mapping in the C<node> table, 
and the MAC address to IP mapping in the C<node_ip> table. 

To remove nodes from a switch, use the Admin Panel on the web side and choose either
C<Delete Nodes>  or C<Archive Nodes>.   Archiving nodes will set the archive bit so that the 
data will be available, but not always showing.   You can also delete nodes from the command 
line using the L<-e> command with or without the L<-V> flag.

Database Cleanup L<-K> will delete nodes that seem to be extraneous.  See L<-K> for more details.

Once you have cleared out nodes from a switch, then run L<-I> to remove unused node to IP mappings.

This is rather permanent.  Make sure you run L<-B>ackup before you do this.

=item Adding / Changing Users

The easiest way to add a user is to use the C<Add User> form in the Admin Panel.  After first installing
Netdisco you need to add an admin user by running L<-u>.  

=item Localhost (127.0.0.1) is showing up on CDP Links

See "How the Switch Selects the IP Address To Include in Outbound CDP
Packets" in ftp://ftp.hp.com/pub/networking/software/59692375_e1.pdf

=item Device Model comes up as 'Products.'

The device is probably newer than your Cisco MIBs.  Redownload the v2.tar.gz and install these 
newest mibs into F</usr/local/share/snmp/mibs>.

=item Things are getting Really slow

For some reason over here at UCSC, things get real slow in Postgres after a while.
Even though we are doing frequent VACUUM's on all the data, it seems to be dragging
down after a while.

In order to fix this we do a C<VACUUM FULL ANALYZE VERBOSE>  from C<pg_run>.
This command locks each table before it does the VACUUM, and therefor can be more through.
It's a good idea to take netdisco down temporarily while you do this.  I do this about
once a month, or when I notice it dragging down.  Use C<Netdisco Statistics> as a good metric
of things slowing down.  This may get fixed with changes in VACUUM in Postgres 7.4 and above.

Procedure for doing a vacuum full :

=over

=item 1. Shutdown the admin daemon   

    su - netdisco -c "/usr/local/netdisco/netdisco -p stop"

=item 2. Clear the cron tab for user netdisco

    su - -c "crontab -u netdisco -r"

=item 3. Comment out the netdisco config file Includes in httpd.conf

=item 4. Restart Apache

    su - -c "/usr/local/apache/bin/apachectl graceful"

=item 5. Run VACUUM FULL ANALYZE VERBOSE in psql

    /usr/local/netdisco/sql/pg_run
    VACUUM FULL ANALYZE VERBOSE;

=item 6. Restart Postgres (just for fun)

    su - -c "/usr/local/etc/rc.d/010.pgsql restart" 

=item 7. Uncomment lines in httpd.conf

=item 8. Restart Apache

    su - -c "/usr/local/apache/bin/apachectl graceful"

=item Reload crontab for user netdisco

    su - -c "crontab -u netdisco /usr/local/netdisco/netdisco.crontab"

=item Restart Admin Daemon

    su - netdisco -c "/usr/local/netdisco/netdisco -p start"

=back

=back

=head2 Topology Information

Topology information is crucial to Netdisco's performance.  It allows the application to know
which ports are uplink ports and which have connected nodes. 

=head3 Manual Topology Information

Netdisco will autodiscover the layer two topology of a network using CDP.  However, many networks 
have parts of the topology that are not covered by CDP.

Use the manual topology file C<netdisco-topology.txt> to supply the layout of the network
if your network has devices that don't talk CDP or misreport information.

The manual topology file only requires one side of the data to be entered.  Both directions 
of a link will be forced to the given data if one side is listed.

B<File Format>

The format of the manual topology consists of four types of lines:

=over

=item #comment

Comments are delimited with a C<#> They can happen on any line.

=item routername

Any line that does not start with C<link:> or C<alias:> is assumed to be a the DNS name or 
IP address of a network device. 

=item link:

Lines that start with C<link:> connect two devices together.  The format is 

    link:outgoing port,destination device,Destination port

The outgoing port belongs to the device listed above the C<link:> line.

The Destination Device and Port tell Netdisco who is on the other end of this link.
The device can be a DNS name or an IP Address.

=item alias:

NOT IMPLEMENTED!

Many network devices like routers have multiple IP addresses assigned to them.  If the device
cannot or does not supply this information to Netdisco in a standard way, you can add IP
addresses used here.

=back

White space in the file (except for line breaks) is ignored.  Tabbing over before C<line:> lines
makes it easier to read, but is not required.

B<File Uses>

Some reasons the manual topology file is used:

=over

=item 1. Man in the Middle

Let's say you have two CDP speaking devices with a non-CDP speaking device in between them

    [Cisco] ---> [Bay] ---> [HP]

The Cisco and HP devices (CDP speakers) find each other and the Bay device never appears. 
You would then have to add these lines to the topology file:

    ciscoswitch.my.company
        link:EtherNet0/1,bayswitch.my.company,25
    bayswitch.my.company
        link:26,hpswitch.my.company,J3

This tells Netdisco that port C<Ethernet0/1> on C<ciscoswitch> is connected to Port C<25> on C<bayswitch>.
Then in turn Port 26 on C<bayswitch> is connected to port C<J3> on C<hpswitch>.

A note about devices that are I<CDP Aware> and that implement CDP:   

I<CDP Aware> devices are devices that probably do not speak CDP (probably for legal reasons) but 
that are smart enough not to forward CDP packets.  Cisco devices that have CDP disabled are usually
still I<CDP Aware> and will not forward the packets.   Man-in-the-middle situations occur when the device
both does not speak CDP and is not I<CDP Aware>.

=item 2. Isolated Network Segment

If you have a segment of your network that is not connected directly, or conneted through a non physical
link like a VPN, then you might fudge an entry to connect that segement of the nework with the main one.

=item 3. Attach a non-CDP speaking device

Anywhere a device that does not supply topology information is connected to the network, an entry
must be added in the manual topology file.

=back

=head2 Cron Jobs

Netdisco is controlled via cron jobs.  Jobs are run as user C<netdisco>.
Mulitple jobs can be run at once. 

The default jobs are :

=over

=item * MacSuck - Every 4 hours MacSuck all the devices in the database.

=item * ArpNip  - Every 4 hours ArpNip  all the devices in the database. (Offset from Macsuck by 2 hours)

=item * Refresh Devices - Once a day refresh device information.

=item * Backup - Once a day backup information.

=item * Graph - Once a day re-create the graph.

=item * Walk Network - Once a week (Wed @ 14:00) try and discover new devices.

=item * Restart Admin Daemon - Once a day just for good measure.

=back

=head1 Config File

The settings in C<netdisco.conf> are used both in the back-end and the front-end.

When you make a change in the config file that is used in the web front end, 
you must reload apache.  The config information is shared between processes for speed
and memory performance.

    su - -c "/usr/local/apache/bin/apachectl restart"

Multiple config files can be used in the back-end by calling Netdisco with the
C<-C> option:

    netdisco -C myotherfile.conf

=head2 General Items

=over

=item domain

STRING. Trimmed from all DNS names viewed.  Leave blank to show all domain names.  Add a dot 
in front of your value :

    .ucsc.edu

=item home

PATH.  Full path to where netdisco lives.  Is the root path for all other files and paths.

=back

=head2 Back-End Items

=over

=item arpnip_no

LIST:IPs and Subnets. Comma Separated list of devices and subnets not to include in arpnipping.

You can put in a CIDR style subnet or a single IP address :

    arpnip_no = 192.168.0.0/24,192.168.0.1,192.168.1.0/24

You can NOT use an abbrievated CIDR subnet like C<192/8>.

=item compress

EXECUTABLE. Full path and command line arguments to the compression program used in L<compresslogs>

=item compresslogs 

BOOLEAN. Compress log files?  See L<compress> entry above.

=item datadir

PATH. Full or relative path to the directory that backups and logs will be stored in

=item discover_no

LIST:IPs and Subnets. Comma Separated list of devices and subnets that will not get hit with 
an SNMP disovery event.

See L<arpnip_no> for more details.

=item ignore_private_nets

Not fully implemented.

BOOLEAN. Set to true to ignore aliases that are part of private nets:

    10.0.0.0/8 172.16.0.0/16 and 192.168.0.0/24  

=item logextension

STRING. The extension to add to log files.

=item macsuck_no

LIST:IPs and Subnets. Comma Separated list of devices and subnets not to macsuck.

See L<arpnip_no> for more details.

=item macsuck_no_vlan

LIST:Strings.  Comma separated list of VLAN names not to visit when MACsucking.

This option was used to speed up MACsucking on certain Cisco Catalyst family devices
where you have to connect to each VLAN with SNMP to get the forwarding tables.   Certain
default VLANs will not answer to SNMP, and Netdisco has to wait for them to timeout. 

=item macsuck_timeout

SECONDS. Timeout for devices when mac sucking.

=item nmis_dump

FILENAME.  Set this option to have nightly() (-B) dump an NMIS L<http://www.sins.com.au/nmis> 
style Config file.  Warning, this file will contain SNMP Community strings. 

Optional Override options are :

=over 

=item nmis_group

STRING.  Group to use with nmis_dump.  Default C<Network>

=item nmis_role

STRING.  Role to use with nmis_dump.  Default C<core>

=item nmis_collect

STRING.  Collect option to use with nmis_dump.  Default C<true>

=item nmis_active 

STRING.  Active option for nmis_dump file. Default C<true>

=item nmis_net

STRING.  Net identifier to use.  Default C<lan>

=item nmis_port

INT. SNMP Port to list in nmis_dump file.  Default C<161>

=back

=item reverse_sysname

BOOLEAN.  Turn this on to have Netdisco do a reverse lookup of the sysName.0 field to use
as the managment IP address for a device.  See bug 810939 and device_root() for more info.
Default C<false> 

=item topofile

FILE. Full path of the file that contains manual topology information.  Defaults to
F<netdisco-topology.txt>

=item timeout

SECONDS. Timeout for refreshing or discovering a device 

=back

=head3 Admin Panel

=over

=item daemon_bg

BOOLEAN.  Run daemon in the background?

=item daemon_pid

FILE.  Filename for the pid file used by admin daemon.  Must be writable by
daemon user.

=item daemon_poll

SECONDS. Time to wait to check for new items in the queue.

=back

=head3 Database Settings

The five database settings are C<db> , C<db_user>, C<db_pw>, C<db_opts>, and C<db_env>.

You can run multiple database types in Netdisco.  See C<port_info> for an instance of this. 

For each of the above settings, the database shortcut name (you choose) is inserted after C<db>. 

Postgres is the required first database, and uses the short name C<Pg>.

The following lines must be added :

=over

=item db_Pg

STRING. Database connect string to give to DBI.

Default : C<dbi:Pg:dbname=netdisco>

=item db_Pg_user

STRING. Database user

=item db_Pg_pw

STRING. Database Password

=item db_Pg_opts

HASH.   Options to add to the connect string.  

Default : C<PrintError =E<gt> 1, AutoCommit =E<gt> 1>

=item db_Pg_env

HASH.  Environment variables to be set before running database calls.  

Mainly used for Oracle.

Default : not set.

=back

=head3 SNMP Settings

=over

=item community

LIST:STRING. A comma separated list of community strings to try on each device.

=item community_rw

LIST:STRING.  OPTIONAL. A comma separated list of Read-Write community strings.  

This is only necessary if you turn on the C<port_control> command.

=item snmpver

INT. Default version of SNMP protocol to connect with.

=item snmpretries

INT. Settings for 'Retries' field passed to SNMP::Session

=back

=head2 Web Settings

=over

=item port_info

BOOLEAN.  Turns on the C<Port Info> and C<Jack Search> features.

=item portctl_email

EMAIL.  Address that reports of use of C<Port Control> are sent to.

=item portctl_timeout

SECONDS.  Amount of time to wait for a response from the admin daemon.

=item secure_server

BOOLEAN. If a secure server is present. 

Requires web login, password changing and all admin functions to be run in secure space.

=item web_console_models

LIST:STRING.  Comma separated list of models that want to use the Web Console

=item web_console_vendors

LIST:STRING.  Comma separated list of vendors that use the Web Console.

=item webpath

PATH. URL Path added to the beginning of links on the web front-end

=item websession

MINUTES.  Amount of time a session lasts before someone has to login again.

=back

=head3 Graph Settings

=over

=item edge_color

STRING. Default color for link between devices.

=item graph

FILE. Full path and name to the GIF graph of the network.  Path should be the same
as in the C<netmap.html> component.

=item graph_bg

STRING. Background color for the graph.

=item graph_color

STRING. Text color for the graph

=item graph_epsilon

INT. Sets the C<epsilon> attribute in C<GraphViz> used to control the graph solver.
Set to an integer value.  This will improve the mapping and visual quality of
them graph. Each integer step can mean an exponential time increase in the solving
of the graph.

=item graph_layout

STRING.  Choose program to render graph with.  Valid options are C<neato> and C<twopi>.

=item graph_map

FILE. Set to Full path and name to the ISMAP data for the network.  Path should be the 
same as in the C<netmap.html> component.

=item graph_overlap 

BOOLEAN. Parameter passed to C<GraphViz> for the C<overlap=""> feature.

=item graph_ranksep

FLOAT.  Rank Separation of elements in graph. 

=item graph_raw

FILE.  Set to create the raw (.dot) graph file as well.

=item graph_splines

BOOLEAN.  Turn on GraphViz's spline engine? (Is very processor intensive).

=item graph_svg

FILE.  Set to create an SVG version of the graph.  Requires GraphViz 0.8 or greater.

=item graph_timeout

MINUTES. Time to allow C<neato> to try and solve the graph.  Default 60min.

=item graph_x, graph_y

FLOAT. The X and Y dimensions of the graph in inches.   To convert to pixels, times by 
100 (96 actually).  So 30x30 will give you a graph that is about 3000x3000 pixels wide.

=item node_fillcolor

STRING. Default background color for device

=item node_font

FILE. Name of the True Type Font used for label of node.
Exclude .ttf in name.

=item node_fontcolor

STRING. Color of text

=item node_fontsize

FLOAT. Size of text in Pixels.  Note that for the graph_overlap=scale option, the font gets scaled down
and so an oversized font is used.

=item node_map

STRING. Colon separated list of values.  Multiple node_map entries can exist.
Entry is in format:

    Variable:Regular Expression:Attribute:Value

Variables that you can use include : label,ip

Attributes can be any node attribute usable in GraphViz, such as fillcolor and color

Examples:

    label:cat(?!-g):fillcolor:blue

If the label (dns name) matches cat, but not cat-g, make it blue

    ip:^169\.233:color:yellow

If the IP address of the device starts with 169.233, then make the border around the 
device yellow.

=item node_problem

STRING. Color to use for devices that are not accessible

=item node_shape

STRING. Default shape for device

=item node_style

STRING. Default style of device, normally filled.

=back

=head1 DESIGN

=head2 Design Goals

=over 4

=item * Use of SNMP Leaf Names only; No OIDs

=item * Easily extendible to new devices. No device-specific hacks in logic

=item * Modular back-end database front-end setup

=item * Security.  Front-end abstraction from device manipulation means 
sensitive network devices are not exposed to a web interface .

=item * Data Archiving.  Data structures and backup routines to provide
online and offline storage of network structure and usage.

=item * Highly Configurable.  Extract out all possible options to F<netdisco.conf>
and avoid site-specific code.

=item * Administration available on both command line and web interfaces.

=back

=head2 Back-End Components

=over 4

=item netdisco.pm

Perl Module that holds all the SQL interaction routines as well as some
helper routines.  Used by both the back-end and front-end. 

=item SNMP::Info

Perl Modules created for this project that are used to provide the interaction
between the device and Netdisco over SNMP.  All device-specific changes are 
done in these modules.

=item Network Walker

Using a device as a starting point (root), the walker then tries to visit every
device directly connected to the starting point.  Neighboring devices are found
with CDP.  


=item ArpNipper 

The ArpNipper is visits each discovered device with Layer 3 capabilities.
Each device's ARP Cache is read and the IP address to MAC address translation is stored
in the B<node_ip> table. 

The original ArpNipper was written by Jim Warner at UCSC.

=item MacSucker

The MacSucker visits each device with Layer 2 capabilities.
Each device's Forwarding Table is read.  MAC addresses that are on ports without
a physical mapping (virtual ports) are skipped.  MAC Addresses on ports with a
neighbor recorded are skipped (uplink ports).  MAC Addresses that are actually 
switch ports are skipped.  The remaining MAC addresses are recorded
as nodes in the B<nodes> table.  

If the device supports the v_name() call, and has VLANs, then the MacSucker tries to 
connect to each VLAN and macksuck() each VLAN.  This is required for some devices like
the Cisco Catalyst 5000 series.

The original MacSucker was written by Mark Boolootian at UCSC.

=item Helper Routines

The 40+ routines for creating backups, logging, etc.

Browse the source code or check out netdisco-api for more info.

=back

=head2 Database

Netdisco uses PostgreSQL as its database store.  Indexing is used heavily to speed up 
queries and facilitate large data sets.   See the C<sql/> directory and INSTALL
for more information.

=head3 SQL Tables 

=over

=item admin

Queue for admin control panel tasks to be sent back and forth from the front-end.

=item device

Holds device information.  Each device is identified by unique IP Address. 

=item device_ip

Holds alias IP Addresses for devices.  Each device can have multiple IP's stored 
in this table.  The master IP address is either taken from SNMP information or 
from the reverse DNS entry of the device name.  Also used to link a certain alias
to a port.

=item device_port

Holds the interface (port) information for each device.  One row for each interface
exists with information about the port status.

=item device_port_log

Contains log entries for port_control, tool used for administratively enabling and disabling 
ports.

=item log

Holds log entries for human use.

=item node

Holds an entry for each MAC address connected to the network that isn't a device. Tells
on which switch port the node was seen, and when it was seen there.  Also holds the archived
data on node location.  Archived data has the column ''active'' set to false. Data comes from 
L<MacSucker>

=item node_ip

Maps a MAC Address to an IP address.  Has no notion of where this node was seen.   Keeps
time stamps of when this is from.  Data comes from L<ArpNipper>.  Archived data is similar
to the L<node> table, where ``active'' is set to false for archived data.

=item sessions

Web sessions created by MasonX::Request::WithApacheSessions.  Stores information about
a current session in the global $m->session hash under mason.

=item oui

Populated with data from oui.txt  Oui.txt contains the Organizationally Unique Identifiers (OUI) that 
map a MAC address to a vendor.  The database is controlled by the IEEE.  See INSTALL for more
information.

=item users

User information for web front end.

=back

=head1 THANKS

I would like to thank the following people for their
contributions to Netdisco :  

    Mark Boolootian [Netdisco's Architect] (UCSC), Jim Warner (UCSC), 
    Remo Rickli (PSI, Switzerland),  Mike Hunter (UCB), Brian Wilson (NCSU),
    David Temkin (sig.com), Edson Manners (FSU), Dmitry Sergienko (Trifle Co, .ua)
    Jean-Philippe Luiggi (sagem.com), Kismet Developers AP List, 
    A.L.M Buxey (Loughborough University, UK), Kevin Cheek (UMICH), Bradley Baetz (bbaetz),
    John Bigrow (bnl.gov), George Pavel (llnl.gov)

And probably lots of other people I forgot to put in here.   Not to mention the 
authors and communities of all the other software that Netdisco is built upon.

=cut
